# GitHub Actions Workflow for skyGO
name: Build and Release skyGO
on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ] # Trigger on tags like v1.0.0
  pull_request:
    branches: [ main ]
  workflow_dispatch:
env:
  GO_VERSION: '1.21'
  PROJECT_NAME: 'skyGO'
jobs:
  # The 'test' job remains unchanged, it's already well-configured.
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Download dependencies
      run: |
        go mod tidy
        go mod download
    - name: Run tests
      run: |
        go fmt $(go list ./... | grep -v /vendor/)
        go vet $(go list ./... | grep -v /vendor/)
        go test -race -coverprofile=coverage.out -covermode=atomic ./...
  # Updated build job to handle multiple Go files
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: windows
            goarch: amd64
            suffix: ".exe"
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Download dependencies
      run: |
        go mod tidy
        go mod download
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        # Use the tag for the version name if it exists, otherwise use the commit SHA
        VERSION=${GITHUB_REF_NAME:-$GITHUB_SHA}
        # Debug: List Go files
        echo "Go files in directory:"
        ls -la *.go
        # Debug: Check go.mod and dependencies
        echo "Go version:"
        go version
        echo "Go list:"
        go list .
        # Build all Go files in the module
        go build -ldflags="-s -w -X main.version=${VERSION} -X main.buildTime=${BUILD_TIME}" \
          -o ${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} \
          .
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}
        path: ${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
        retention-days: 7 # Retention can be shorter as it's only for the release job
  # This 'release' job has been updated to trigger on tags.
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    # This 'if' condition is crucial. It ensures this job only runs for tag pushes.
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        # Download all artifacts into a single directory
        path: ./artifacts
    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v1
      with:
        # The 'softprops' action automatically uses the tag name and commit message for the release.
        # The 'files' glob pattern finds all the downloaded binaries inside their artifact subdirectories.
        files: ./artifacts/*/*
        generate_release_notes: true # Automatically create release notes from commits.
      env:
        # The GITHUB_TOKEN is automatically provided by GitHub Actions.
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
