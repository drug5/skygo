# GitLab CI Pipeline for skyGO - Automatic Releases
image: golang:1.21-alpine

# Define stages
stages:
  - test
  - build
  - release

# Global variables
variables:
  GO_VERSION: "1.21"
  CGO_ENABLED: "0"
  GOPROXY: "https://proxy.golang.org,direct"
  PROJECT_NAME: "skyGO"

# Cache Go modules for faster builds
cache:
  paths:
    - .cache/go-build/
    - .cache/go-mod/

# Before script - setup environment
before_script:
  - apk add --no-cache git make
  - export GOPATH="$CI_PROJECT_DIR/.cache/go"
  - export GOCACHE="$CI_PROJECT_DIR/.cache/go-build"
  - export GOMODCACHE="$CI_PROJECT_DIR/.cache/go-mod"
  - go version
  - go mod download

# Test stage
test:
  stage: test
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test -race -coverprofile=coverage.txt -covermode=atomic ./...
  coverage: '/coverage: \d+\.\d+% of statements/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Build stage - Automatically triggered on main branch pushes
build:
  stage: build
  script:
    - mkdir -p dist
    
    # Get version info
    - VERSION=${CI_COMMIT_SHORT_SHA}
    - BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
    - echo "Building version $VERSION at $BUILD_TIME"
    
    # Linux AMD64 (x86_64)
    - GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=$VERSION -X main.buildTime=$BUILD_TIME" -o dist/${PROJECT_NAME}-linux-amd64 main.go
    
    # Linux ARM64 (ARM 64-bit)
    - GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=$VERSION -X main.buildTime=$BUILD_TIME" -o dist/${PROJECT_NAME}-linux-arm64 main.go
    
    # Windows AMD64
    - GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.version=$VERSION -X main.buildTime=$BUILD_TIME" -o dist/${PROJECT_NAME}-windows-amd64.exe main.go
    
    # Make Linux binaries executable
    - chmod +x dist/${PROJECT_NAME}-linux-*
    
    # Show build info
    - ls -la dist/
    - file dist/* || true
    
    # Create checksums for security
    - cd dist && sha256sum * > checksums.txt && cd ..
    - cat dist/checksums.txt
    
  artifacts:
    name: "${PROJECT_NAME}-build-$CI_COMMIT_SHORT_SHA"
    paths:
      - dist/
    expire_in: 1 month
  only:
    - main
    - develop

# Automatic release job - Creates release for every main branch push
auto-release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - build
  script:
    - echo "Creating automatic release for commit $CI_COMMIT_SHORT_SHA"
    - ls -la dist/
  release:
    name: 'skyGO Build $CI_COMMIT_SHORT_SHA'
    description: |
      Automatic build release for skyGO
      
      **Commit**: $CI_COMMIT_SHA
      **Branch**: $CI_COMMIT_REF_NAME
      **Built**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
      
      ## Changes
      $CI_COMMIT_MESSAGE
      
      ## Downloads
      - Linux AMD64: Download below
      - Linux ARM64: Download below  
      - Windows AMD64: Download below
    tag_name: 'build-$CI_COMMIT_SHORT_SHA'
    assets:
      links:
        - name: 'Linux AMD64 Binary'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/raw/dist/${PROJECT_NAME}-linux-amd64?job=build'
          link_type: 'package'
        - name: 'Linux ARM64 Binary'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/raw/dist/${PROJECT_NAME}-linux-arm64?job=build'
          link_type: 'package'
        - name: 'Windows AMD64 Binary'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/raw/dist/${PROJECT_NAME}-windows-amd64.exe?job=build'
          link_type: 'package'
        - name: 'Checksums'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/raw/dist/checksums.txt?job=build'
          link_type: 'other'
  only:
    - main

# Tagged release job - For official versions (v1.0.0, etc.)
tagged-release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - build
  script:
    - echo "Creating official release for tag $CI_COMMIT_TAG"
  release:
    name: 'skyGO $CI_COMMIT_TAG'
    description: |
      Official release of skyGO $CI_COMMIT_TAG
      
      ## Downloads
      Choose the binary for your platform:
      - **Linux AMD64**: Most Linux servers and desktops
      - **Linux ARM64**: ARM servers, Raspberry Pi 4+
      - **Windows AMD64**: Windows desktops and servers
      
      ## Installation
      1. Download the appropriate binary
      2. Make executable (Linux): `chmod +x skyGO-*`
      3. Run: `./skyGO-linux-amd64` or `skyGO-windows-amd64.exe`
    tag_name: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'Linux AMD64 Binary'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/raw/dist/${PROJECT_NAME}-linux-amd64?job=build'
          link_type: 'package'
        - name: 'Linux ARM64 Binary'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/raw/dist/${PROJECT_NAME}-linux-arm64?job=build'
          link_type: 'package'
        - name: 'Windows AMD64 Binary'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/raw/dist/${PROJECT_NAME}-windows-amd64.exe?job=build'
          link_type: 'package'
        - name: 'Checksums'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/raw/dist/checksums.txt?job=build'
          link_type: 'other'
  only:
    - tags

# Optional: Cleanup old releases (manual job)
cleanup-releases:
  stage: release
  script:
    - echo "Manual cleanup job - remove old build releases if needed"
    - echo "This would clean up releases older than 30 days"
  when: manual
  only:
    - main
